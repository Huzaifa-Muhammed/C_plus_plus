#include <iostream>

using namespace std;

class Node
{
private:
    char data;
    Node *next;

public:
    Node(char val)
    {
        data = val;
        next = NULL;
    }

    friend class Stack;
};

class Stack
{
private:
    Node *Top;

public:
    Stack()
    {
        Top = NULL;
    }

    void Push(char st)
    {

        Node *temp = Top;
        Node *myNode = new Node(st);

        if (IsEmpty())
        {
            Top = myNode;
        }
        else
        {
            myNode->next = temp;
            temp = myNode;
            Top = temp;
        }
    }

    void Pop()
    {
        Node *temp = Top;
        Node *del;
        if (!IsEmpty())
        {
            del = temp;
            Top = temp->next;
            delete del;
        }
    }

    bool IsEmpty()
    {
        return Top == NULL ? true : false;
    }

    char Peek()
    {
        Node *temp = Top;

        if (!IsEmpty())
        {
            return temp->data;
        }
    }

    int Precedence(char c)
    {
        if (c == '-' || c == '+')
            return 1;
        else if (c == '*' || c == '/')
            return 2;
        else if (c == '^')
            return 3;
        return 0;
    }

    void InfixToPostFix(string s)
    {
        string output;

        for (int i = 0; i < s.length(); i++)
        {
            char c = s[i];

            if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
            {
                output += c;
            }
            else if (c == '(')
            {
                Push('(');
            }
            else if (c == ')')
            {
                while (Peek() != '(')
                {
                    output += Peek();
                    Pop();
                }
                Pop();
            }
            else
            {
                while (!IsEmpty() && Precedence(s[i]) <= Precedence(Peek()))
                {
                    output += Peek();

                    Pop();
                }
                Push(c);
            }
        }
        while (!IsEmpty())
        {
            output += Peek();
            Pop();
        }

        cout << output << endl;
    }
};

int main()
{
    Stack S;
    string input;
    cout << "Enter an expression in infix form with Brackets: ";
    cin >> input;
    S.InfixToPostFix(input);
    return 0;
}